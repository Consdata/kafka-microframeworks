version: '3.9'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: CHANGE_ME
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "spring-boot-sell-orders:4:1,spring-boot-buy-orders:4:1,spring-boot-transactions:4:1,micronaut-sell-orders:4:1,micronaut-buy-orders:4:1,micronaut-transactions:4:1,quarkus-sell-orders:4:1,quarkus-buy-orders:4:1,quarkus-transactions:4:1,javalin-sell-orders:4:1,javalin-buy-orders:4:1,javalin-transactions:4:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - "zookeeper"
    healthcheck:
      test: [ "CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --list --zookeeper zookeeper:2181 | grep transactions | wc -l | grep 4" ]
      interval: 10s
      timeout: 10s
      retries: 3
  kouncil:
    image: consdata/kouncil
    ports:
      - "8080:8080"
    environment:
      bootstrapServers: "kafka:9092"
    depends_on:
      - "kafka"
  springboot:
    build:
      context: ./kafka-microframeworks-spring-boot
    image: consdata/kafka-microframeworks-spring-boot
    container_name: spring-boot
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
  micronaut:
    build:
      context: ./kafka-microframeworks-micronaut
    image: consdata/kafka-microframeworks-micronaut
    container_name: micronaut
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
  quarkus:
    build:
      context: ./kafka-microframeworks-quarkus
      dockerfile: Dockerfile.native
    image: consdata/kafka-microframeworks-quarkus-native
    container_name: quarkus
    ports:
      - "8083:8080"
    depends_on:
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
  javalin:
    build:
      context: ./kafka-microframeworks-javalin
    image: consdata/kafka-microframeworks-javalin
    container_name: javalin
    ports:
      - "8084:8084"
    depends_on:
      kafka:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
  netdata:
    image: netdata/netdata
    ports:
      - "19999:19999"
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
